CREATE DATABASE PROJECTSALES

USE PROJECTSALES

SELECT * FROM SALES

SELECT * FROM INFORMATION_SCHEMA.COLUMNS 
WHERE TABLE_NAME = 'SALES'

ALTER TABLE SALES 
ALTER COLUMN TOTAL_SALE FLOAT

SELECT TOP 100 * FROM SALES 
ORDER BY TRANSACTIONS_ID

SELECT COUNT(*) FROM SALES

SELECT * FROM SALES
WHERE 
    TRANSACTIONS_ID IS NULL
    OR
    SALE_DATE IS NULL
    OR 
    SALE_TIME IS NULL
    OR
    GENDER IS NULL
    OR
    CATEGORY IS NULL
    OR
    QUANTIY IS NULL
    OR
    COGS IS NULL
    OR
    TOTAL_SALE IS NULL;

DELETE FROM SALES WHERE
    TRANSACTIONS_ID IS NULL
    OR
    SALE_DATE IS NULL
    OR 
    SALE_TIME IS NULL
    OR
    GENDER IS NULL
    OR
    CATEGORY IS NULL
    OR
    QUANTIY IS NULL
    OR
    COGS IS NULL
    OR
    TOTAL_SALE IS NULL
    OR
    SALE_TIME IS NULL
    OR
    CUSTOMER_ID IS NULL
    OR
    PRICE_PER_UNIT IS NULL
    OR
    AGE IS NULL 

SELECT COUNT(DISTINCT CUSTOMER_ID) FROM SALES

SELECT CATEGORY, COUNT(CUSTOMER_ID) FROM SALES
GROUP BY CATEGORY

SELECT COUNT(DISTINCT AGE) FROM SALES

-- DATA ANALYSIS & BUSINESS KEY PROBLEMS & ANSWERS

-- Q.1 WRITE A SQL QUERY TO RETRIEVE ALL COLUMNS FOR SALES MADE ON '2022-11-05

SELECT * FROM SALES 
WHERE SALE_DATE = '2022-11-05'

-- Q.2 WRITE A SQL QUERY TO RETRIEVE ALL TRANSACTIONS WHERE THE CATEGORY IS 'CLOTHING' AND THE QUANTITY SOLD IS MORE THAN 10 IN THE MONTH OF NOV-2022

SELECT * FROM SALES 
WHERE CATEGORY = 'CLOTHING' 
    AND QUANTIY >= 4  
    AND SALE_DATE >= '2022-11-01'
    AND SALE_DATE < '2022-12-01';

-- Q.3 WRITE A SQL QUERY TO CALCULATE THE TOTAL SALES (TOTAL_SALE) FOR EACH CATEGORY.

SELECT CATEGORY, SUM(TOTAL_SALE) FROM SALES
GROUP BY CATEGORY

-- Q.4 WRITE A SQL QUERY TO FIND THE AVERAGE AGE OF CUSTOMERS WHO PURCHASED ITEMS FROM THE 'BEAUTY' CATEGORY.

SELECT AVG(AGE) FROM SALES 
WHERE CATEGORY = 'BEAUTY'

-- Q.5 WRITE A SQL QUERY TO FIND ALL TRANSACTIONS WHERE THE TOTAL_SALE IS GREATER THAN 1000.

SELECT * FROM SALES
WHERE TOTAL_SALE > 1000

-- Q.6 WRITE A SQL QUERY TO FIND THE TOTAL NUMBER OF TRANSACTIONS (TRANSACTION_ID) MADE BY EACH GENDER IN EACH CATEGORY.

SELECT GENDER, COUNT(DISTINCT TRANSACTIONS_ID) FROM SALES
GROUP BY GENDER

-- Q.7 WRITE A SQL QUERY TO CALCULATE THE AVERAGE SALE FOR EACH MONTH. FIND OUT BEST SELLING MONTH IN EACH YEAR

SELECT YEAR(SALE_DATE), MONTH(SALE_DATE), AVG(TOTAL_SALE) AS AVGG FROM SALES
GROUP BY YEAR(SALE_DATE), MONTH(SALE_DATE)
ORDER BY AVGG DESC

-- Q.8 WRITE A SQL QUERY TO FIND THE TOP 5 CUSTOMERS BASED ON THE HIGHEST TOTAL SALES 

SELECT TOP 5 CUSTOMER_ID, SUM(TOTAL_SALE) AS SUMM FROM SALES 
GROUP BY CUSTOMER_ID
ORDER BY SUMM DESC

-- Q.9 WRITE A SQL QUERY TO FIND THE NUMBER OF UNIQUE CUSTOMERS WHO PURCHASED ITEMS FROM EACH CATEGORY.

SELECT 
    CATEGORY,    
    COUNT(DISTINCT CUSTOMER_ID) AS CNT_UNIQUE_CS
FROM SALES
GROUP BY CATEGORY

-- Q.10 WRITE A SQL QUERY TO FIND CUSTOMERS WHO PURCHASED ITEMS FROM EVERY CATEGORY, NOT JUST ANY CATEGORY

SELECT COUNT(*) FROM (
    SELECT CUSTOMER_ID FROM
    (SELECT CUSTOMER_ID, COUNT(DISTINCT CATEGORY) CT FROM SALES
     GROUP BY CUSTOMER_ID) AS SUB
    WHERE CT = 
    (SELECT COUNT(DISTINCT CATEGORY) FROM SALES)
) AS FINAL

-- Q.11 WRITE A SQL QUERY TO CREATE EACH SHIFT AND NUMBER OF ORDERS (EXAMPLE MORNING <=12, AFTERNOON BETWEEN 12 & 17, EVENING >17)

WITH HOURLY_SALE AS (
    SELECT *,
    CASE 
        WHEN DATEPART(HOUR, SALE_TIME) <= 12 THEN 'MORNING'
        WHEN DATEPART(HOUR, SALE_TIME) > 12 AND DATEPART(HOUR, SALE_TIME) <= 17 THEN 'AFTERNOON'
        ELSE 'EVENING'
    END AS SHIFT
    FROM SALES
)
SELECT SHIFT, COUNT(*) FROM HOURLY_SALE 
GROUP BY SHIFT
